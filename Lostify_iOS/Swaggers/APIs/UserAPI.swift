//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class UserAPI: APIBase {

    public class func mapValuesToQueryItems(values: [String:Any?]) -> [URLQueryItem] {
        return values
            .filter { $0.1 != nil }
            .map { (item: (_key: String, _value: Any?)) -> URLQueryItem in
                URLQueryItem(name: item._key, value:"\(item._value!)")
            }
    }

    /**
     Get user by id
     
     - parameter id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiUserByIdGet(id: Int32, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        apiUserByIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get user by id
     - GET /api/User/{id}
     - examples: [{contentType=application/json, example={
  "firstName" : "aeiou",
  "lastName" : "aeiou",
  "phoneNumber" : "aeiou",
  "socialNetworks" : [ {
    "socialUserId" : "aeiou",
    "isMaster" : true,
    "socialType" : "aeiou"
  } ],
  "userId" : 123,
  "email" : "aeiou",
  "countryId" : 123
}}]
     
     - parameter id: (path)  

     - returns: RequestBuilder<User> 
     */
    open class func apiUserByIdGetWithRequestBuilder(id: Int32) -> RequestBuilder<User> {
        var path = "/api/User/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:Any?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update user
     
     - parameter id: (path)  
     - parameter value: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiUserByIdPut(id: Int32, value: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiUserByIdPutWithRequestBuilder(id: id, value: value).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update user
     - PUT /api/User/{id}
     
     - parameter id: (path)  
     - parameter value: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiUserByIdPutWithRequestBuilder(id: Int32, value: String? = nil) -> RequestBuilder<Void> {
        var path = "/api/User/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = value?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

    /**
     Register user
     
     - parameter value: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiUserRegisterPost(value: User? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiUserRegisterPostWithRequestBuilder(value: value).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Register user
     - POST /api/User/register
     
     - parameter value: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiUserRegisterPostWithRequestBuilder(value: User? = nil) -> RequestBuilder<Void> {
        let path = "/api/User/register"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = value?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        

        let convertedParameters = APIHelper.convertBoolToString(parameters)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: convertedParameters, isBody: true)
    }

}
